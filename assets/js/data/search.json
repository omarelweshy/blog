[ { "title": "How To Create Load Balancer With Nginx And Docker", "url": "/posts/how-to-create-load-balancer-with-nginx-and-docker/", "categories": "Backend, DevOps", "tags": "Nginx, Docker", "date": "2022-12-17 11:14:00 +0200", "snippet": "IntroductionIt’s crucial to ensure that your web applications are always available and can handle high traffic. That’s where a load balancer comes in - it distributes incoming traffic evenly across multiple servers, maximizing performance and minimizing downtime.But setting up a load balancer can be a daunting task, especially for those who are new to the world of web development. That’s why we’ve created this guide - to walk you through the process of creating a load balancer using Docker and NGINX. These tools are powerful, flexible and easy to use, making them the perfect choice for load balancing.PreparationYou need to install the following: Nodejs Docker NignxFile StructureOur file Structure will be like thisDockerfileFROM node:16WORKDIR /home/node/appCOPY app /home/node/appRUN npm installRUN npm run appEXPOSE 3000index.jsconst app = require(&quot;express&quot;)();app.get(&quot;/&quot;, (req, res) =&amp;gt; { res.send(`Hello from ${process.env.appId} docker`);});app.listen(3000, () =&amp;gt; console.log(&quot;app at http://localhost:3000&quot;));package.json{ &quot;name&quot;: &quot;app&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;app&quot;: &quot;node index.js&quot; }, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: { &quot;express&quot;: &quot;^4.18.2&quot; }}Create Multiple ContainerWe need to create multiple images point to the nodejs server with different portsFirst you should build the app into Containerdocker build -t nodeapplication .thendocker run -p &amp;lt;PORT&amp;gt;:3000 -e appId=&amp;lt;ID&amp;gt; -d nodeapplicationthe resultNow if you checked your browser for every port should be serve your images with spicified ports correctly. for example port 3001and so on.Setting Nginx UpAfter Installing Nginx to your machine, we will work with /etc/nginx/nginx.conf. Copy code below to your nginx.conf filehttp { upstream containers { server 127.0.0.1:3001; server 127.0.0.1:3002; server 127.0.0.1:3003; server 127.0.0.1:3004; server 127.0.0.1:3005; } server { listen 80; location / { proxy_pass http://containers/; } }}events {}Now we Created upstream called containers to serve all our backend and we also created server listen to port 80 and proxy_pass to our containers upstream.If we visit localhost we should see nginx balancing and switching between created containters.You can notice that it serve in sequential order that is because nginx uses Round Robin AlgorithmConclusionIn conclusion, creating a load balancer with Docker and NGINX is a powerful way to ensure the availability and performance of your web application. By distributing incoming traffic evenly across multiple servers, a load balancer can maximize performance and minimize downtime." }, { "title": "How To Manage Dotfiles", "url": "/posts/how-to-manage-dotfiles/", "categories": "Linux", "tags": "dotfiles", "date": "2021-10-07 14:14:00 +0200", "snippet": "IntroductionWhen your OS crashes or you needed to change it, you will reconfigure .dotfiles such as .zsh, .gitconfig and .vimrc. These .dotfiles change over time as you start customizing linux according to your needs. How do we save this configurations to avoid manual work every time ? The answer is Dotfiles Manager.How to build a Dotfile ManagerThere are alot of Dotfile Managers out there, for example atlassian, yadm and more here.I prefer the scratch way.First of all, you should Create a new repository on GitHub named .dotfiles and clone it in the $HOME directory where you will host your dotfiles. Clone your repo to the .dotfiles directorySSHgit clone git@github.com:&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/.dotfiles.git ~/.dotfilesHTTPSgit clone https://github.com/&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/.dotfiles.git ~/.dotfilesNow, you have an empty directory. The next step is to add your files in it. Move your files to ~/.dotfiles.For simplicity, we will work on the .tmux.conf file then you can do this for the rest of files.Now, we will move .tmux.conf to ~/.dotfiles directory. You can use mv to move file to .dotfiles, for examplemv .tmux.conf .dotfiles/With the command ll -al ~/.dotfiles | grep tmux we search for any files or directories contains tmux name in ~/.dtofiles but not found. After run mv .tmux.conf .dotfiles and search again .tmux.conf file moved to .dotfiles directory successfully.BUTThe Tmux configuration has broken. Of course, broken because there is no configuration file in the $HOME directory were in, it’s in the ~/.dotfiles directory. How do we use this file and at the same time keep it tracked by git in ~/.dotfiles?We use ln util to link file from ~/.dotfiles directory to same file in the $HOME directory where can tmux use it and track all changes.ln -s ~/.dotfiles/.tmux.conf ~/.tmux.confWith the command above we created a copy of the .tmux.conf file to the $HOME directory with a link as shown belowEverything is ready. By opening ~/dotfiles/.tmux.conf and ~/.tmux.conf side-by-side, every editing happens to any of two files, it happens to another.we have a file that configures tmux and same file tracked by git into your .dotfiles github repo.Finally go to ~/.dotfiles and push to Github.Here is my repo with the code.SummaryLet’s summarize some important things we have done. Create repo named .dotfiles Clone it into your Home dirgit clone git@github.com:&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/.dotfiles.git ~/.dotfiles Move your files to ~/.dotfiles using mv Link your moved files with ln and it will automatically copied for you Push your files to Github" } ]
